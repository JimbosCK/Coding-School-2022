@page "/items"
@using FuelStation.Blazor.Shared.ViewModels
@inject AppState appState
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject AccessHandler accessHandler


@if (IsAuthorized())
{
    @if (isLoading)
    {
        <div class="lds-hourglass"></div>    
    }
    else
    {
         <h3 style="margin-top:5px">
           <span>Items (@{@itemList.Count();})</span>
        </h3>
        <button class="btn btn-primary" @onclick="AddNewItem">New Item</button>

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Price</th>
                    <th>Cost</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in itemList)
                {
                    <tr>
                        <td>@item.Code</td>
                        <td>@item.Description</td>
                        <td>@item.ItemType</td>
                        <td>@item.Price</td>
                        <td>@item.Cost</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditItem(item)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteItem(item)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

}
else
{
    <FuelStation.Blazor.Client.Components.AccessDenied />
}


@code {
    private bool isLoading = true;
    private List<ItemListViewModel> itemList = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        itemList = await httpClient.GetFromJsonAsync<List<ItemListViewModel>>("item");
    }

    private async Task EditItem(ItemListViewModel item)
    {
        navigationManager.NavigateTo($"/Items/Edit/{item.ID}");

    }

    private async Task AddNewItem()
    {
        navigationManager.NavigateTo("/items/edit");
    }

    private async Task DeleteItem(ItemListViewModel item)
    {
        var response = await httpClient.DeleteAsync($"item/{item.ID}");
        response.EnsureSuccessStatusCode();
        await LoadItemsFromServer();
    }
    private bool IsAuthorized()
    {
        return accessHandler.HasAccessToItems(appState);
    }

    }